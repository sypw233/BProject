name: Build Multi-Platform Apps

# 触发条件：仅在创建tag时自动编译
on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch: # 允许手动触发

jobs:
  # Windows构建任务（包含MSI安装包和可执行文件）
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      shell: bash
      
    # 构建Windows可执行文件
    - name: Build Windows Executable
      run: ./gradlew :composeApp:createDistributable
      shell: bash
      
    # 构建Windows MSI安装包
    - name: Build Windows MSI
      run: ./gradlew :composeApp:packageMsi
      shell: bash
      
    - name: Upload Windows Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-desktop-app
        path: |
          composeApp/build/compose/binaries/main/app/
          composeApp/build/compose/binaries/main/msi/*.msi
        retention-days: 30
  # macOS构建任务
  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    # 构建macOS DMG安装包
    - name: Build macOS DMG
      run: ./gradlew :composeApp:packageDmg
      
    - name: Upload macOS Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-desktop-app
        path: |
          composeApp/build/compose/binaries/main/dmg/*.dmg
          composeApp/build/compose/binaries/main/app/
        retention-days: 30

  # Linux构建任务
  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    # 构建Linux DEB安装包
    - name: Build Linux DEB
      run: ./gradlew :composeApp:packageDeb
      
    - name: Upload Linux Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-desktop-app
        path: |
          composeApp/build/compose/binaries/main/deb/*.deb
          composeApp/build/compose/binaries/main/app/
        retention-days: 30

  # 创建Release（编译完成后自动发布）
  create-release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    
    steps:
    - name: Download Windows Artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-desktop-app
        path: ./artifacts/windows/

        
    - name: Download macOS Artifacts
      uses: actions/download-artifact@v4
      with:
        name: macos-desktop-app
        path: ./artifacts/macos/
        
    - name: Download Linux Artifacts
      uses: actions/download-artifact@v4
      with:
        name: linux-desktop-app
        path: ./artifacts/linux/
        
    # 重命名文件为规范格式
    - name: Rename Release Files
      run: |
        # 获取tag名称
        TAG_NAME=${GITHUB_REF#refs/tags/}
        
        # 重命名Windows文件
        cd ./artifacts/windows/
        if [ -f *.msi ]; then
          mv *.msi "bProject_${TAG_NAME}_windows.msi"
        fi
        zip -r "../../bProject_${TAG_NAME}_windows.zip" .
        
        # 重命名macOS文件
        cd ../macos/
        if [ -f *.dmg ]; then
          mv *.dmg "bProject_${TAG_NAME}_macos.dmg"
        fi
        
        # 重命名Linux文件
        cd ../linux/
        if [ -f *.deb ]; then
          mv *.deb "bProject_${TAG_NAME}_linux.deb"
        fi
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./artifacts/windows/bProject_${{ github.ref_name }}_windows.msi
          ./bProject_${{ github.ref_name }}_windows.zip
          ./artifacts/macos/bProject_${{ github.ref_name }}_macos.dmg
          ./artifacts/linux/bProject_${{ github.ref_name }}_linux.deb
        draft: false
        prerelease: false
        tag_name: ${{ github.ref_name }}
        name: bProject ${{ github.ref_name }}
        body: |
          ### 安装说明
          1. **Windows**: 
             - MSI安装包：下载 `bProject_${{ github.ref_name }}_windows.msi` 文件并运行安装
             - 便携版：下载 `bProject_${{ github.ref_name }}_windows.zip` 文件，解压后运行exe文件
          2. **macOS**: 下载 `bProject_${{ github.ref_name }}_macos.dmg` 文件，拖拽到应用程序文件夹
          3. **Linux**: 下载 `bProject_${{ github.ref_name }}_linux.deb` 文件，使用 `sudo dpkg -i bProject_${{ github.ref_name }}_linux.deb` 安装
          
          ### 更新内容
          - 最新的功能更新和bug修复
          - 性能优化和稳定性提升
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}